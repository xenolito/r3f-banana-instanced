{"version":3,"sources":["layout/styles.js","context/FruitsProvider.jsx","layout/Overlay.jsx","context/ColorsProvider.jsx","components/Banana.jsx","components/Background.jsx","components/PageBackground.jsx","components/Organic.jsx","App.js","index.js"],"names":["fade","keyframes","FadeIn","styled","div","Container","Button","button","props","color","hovercolors","bg","border","FruitsContext","createContext","FruitsProvider","useState","fruit","setFruit","useEffect","localStorage","getItem","JSON","parse","Provider","value","cambioFruit","valor","setItem","stringify","children","Overlay","useContext","title","changeFruta","fruta","className","onClick","ColorsContext","ColorsProvider","banana","bgColor","txtColor","kiwi","theme","setTheme","cambioTheme","Banana","z","depth","ref","bgTo","id","useRef","useThree","viewport","camera","clicked","setClicked","hover","setHovered","getCurrentViewport","width","height","dracoDecoderTemp","fruitModels","useGLTF","scale","rotation","matE","intensity","x","THREE","randFloatSpread","y","rX","Math","random","PI","rY","rZ","data","useFrame","state","delta","clock","current","material","wireframe","set","position","onPointerEnter","e","onPointerLeave","geometry","nodes","attach","map","materials","skin","emissive","emissiveIntensity","Background","args","PageBackground","count","gl","alpha","antialias","powerPreference","gl2","performance","min","dpr","mode","shadows","near","far","fov","style","zIndex","fallback","Array","from","length","_","i","multisampling","target","focalLength","bokehScale","extend","UnrealBloomPass","App","Stats","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAEaA,EAAOC,YAAH,2EAKJC,EAASC,IAAOC,IAAV,yRAUFJ,GAIJK,EAAYF,IAAOC,IAAV,qyCA+CTE,EAASH,IAAOI,OAAV,gcAML,SAACC,GAAD,OAAYA,EAAMC,OAAS,UASZ,SAACD,GAAD,aAAW,UAAAA,EAAME,mBAAN,eAAmBC,KAAM,iBAChD,SAACH,GAAD,aAAY,UAAAA,EAAME,mBAAN,eAAmBD,QAAS,aAC7B,SAACD,GAAD,eAAY,UAAAA,EAAME,mBAAN,eAAmBE,UAAnB,UAA6BJ,EAAME,mBAAnC,aAA6B,EAAmBD,U,eCnF3EI,EAAgBC,0BA0BdC,EAxBQ,SAACP,GAEpB,IAEA,EAA0BQ,mBAFT,UAEjB,mBAAOC,EAAP,KAAcC,EAAd,KAEAC,qBAAU,WACHC,aAAaC,QAAQ,eACpBH,EAASI,KAAKC,MAAMH,aAAaC,QAAQ,kBAE9C,IAOH,OACI,cAACR,EAAcW,SAAf,CAAwBC,MAAO,CAACR,QAAOS,YANvB,SAACC,GACjBT,EAASS,GACTP,aAAaQ,QAAQ,aAAaN,KAAKO,UAAUF,MAIjD,SACKnB,EAAMsB,YCwBJC,EA1CE,WAIb,MAA6BC,qBAAWnB,GAAjCI,EAAP,EAAOA,MAAOS,EAAd,EAAcA,YAERO,EAAmB,SAAVhB,EAAoB,OAAS,SAGtCiB,EAAc,SAACC,GASjBT,EAAYS,IAGhB,OACI,eAAC9B,EAAD,CAAW+B,UAAU,YAArB,UAEI,sCAAQ,uBAAMA,UAAU,UAAhB,UAA2BH,EAA3B,QAAR,WAOC,cAAC3B,EAAD,CAAQ+B,QAAS,kBAAMH,EAAY,SAAnC,0BAGA,cAAC5B,EAAD,CAAQ+B,QAAS,kBAAMH,EAAY,WAAWzB,MAAO,OAAQC,YAAa,CAACD,MAAO,UAAWE,GAAI,WAAjG,oCCrCA2B,EAAgBxB,0BAqCdyB,EAnCQ,SAAC/B,GAIpB,IAWA,EAA0BQ,mBAXX,CACXwB,OAAQ,CACJC,QAAS,CAAC,IAAK,IAAK,GAAI,GACxBC,SAAU,CAAC,EAAE,EAAE,IAEnBC,KAAM,CACFF,QAAS,CAAC,IAAI,GAAG,EAAE,GACnBC,SAAU,CAAC,IAAI,IAAI,MAI3B,mBAAOE,EAAP,KAAcC,EAAd,KAEA1B,qBAAU,WACHC,aAAaC,QAAQ,eACpBwB,EAASvB,KAAKC,MAAMH,aAAaC,QAAQ,kBAE9C,IAOH,OACI,cAACiB,EAAcd,SAAf,CAAwBC,MAAO,CAACmB,QAAOE,YANvB,SAACnB,GACjBkB,EAASlB,GACTP,aAAaQ,QAAQ,aAAaN,KAAKO,UAAUF,MAIjD,SACKnB,EAAMsB,Y,sCC2HJiB,EArJA,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,EAAGC,EAAsB,EAAtBA,MACXC,GADiC,EAAfC,KAAe,EAATC,GAClBC,oBACZ,EAA6BC,cAArBC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,OAClB,EAA8BxC,oBAAS,GAAvC,mBAAOyC,EAAP,KAAgBC,EAAhB,KACA,EAA4B1C,oBAAS,GAArC,mBAAO2C,EAAP,KAAcC,EAAd,KAIO3C,EAASe,qBAAWnB,GAApBI,MAIP,EAAwBsC,EAASM,mBAAmBL,EAAQ,CAAC,EAAG,EAAGR,IAA7Dc,EAAN,EAAMA,MAAOC,EAAb,EAAaA,OAGPC,EAAmB,UAMnBC,EAAc,CAChBtB,KAAK,2BACEuB,YAAQ,yBAAyBF,IADpC,IAEAG,MAAO,CAAC,KAAM,KAAM,MACpBC,SAAU,CAAC,EAAG,KAAM,GACpB3B,QAAS,CAAC,EAAG,IAAK,KAEtBD,OAAO,2BACA0B,YAAQ,2BAA4BF,IADrC,IAEFK,KAAM,CACF5D,MAAO,SACP6D,UAAW,KAEfF,SAAU,EAAE,IAAK,EAAG,GACpB3B,QAAS,CAAC,IAAK,IAAK,IACpB0B,MAAO,KAIf,EAAenD,mBAAS,CACpBuD,EAAGC,YAAgBC,gBAAgB,GACnCC,EAAGF,YAAgBC,gBAAgBV,GACnCf,EAAGA,EACH2B,GAAIC,KAAKC,SAAWD,KAAKE,GACzBC,GAAIH,KAAKC,SAAWD,KAAKE,GACzBE,GAAIJ,KAAKC,SAAWD,KAAKE,KANtBG,EAAP,oBAyCA,OAhCA9D,qBAAU,cAEP,CAAC+B,IAEJgC,aAAS,SAACC,EAAOC,EAAOC,EAAO7B,GAC3BN,EAAIoC,QAAQC,SAASC,UAAY7B,EAIjCT,EAAIoC,QAAQlB,SAASqB,IAAKR,EAAKN,IAAM,KAASM,EAAKF,IAAM,KAASE,EAAKD,IAAM,MAC7E9B,EAAIoC,QAAQI,SAASD,IACjBR,EAAKV,EAAIT,EACRmB,EAAKP,GAAK,IACXjB,EAAWwB,EAAKjC,GAAK,GAAOiC,EAAKjC,GAGjCiC,EAAKP,EAAInB,EAASM,mBAAmBL,EAAQ,CAAC,EAAG,EAAGyB,EAAKjC,IAAIe,SAC7DkB,EAAKP,EAAkE,KAA7DnB,EAASM,mBAAmBL,EAAQ,CAAC,EAAG,EAAGyB,EAAKjC,IAAIe,QAG9DN,GACIP,EAAIoC,QAAQI,SAAS1C,GAAc,EAARC,IAE3BS,GAAW,GACXuB,EAAKjC,GAAK4B,KAAKC,SAAW5B,EAC1BgC,EAAKP,GAAKnB,EAASM,mBAAmBL,EAAQ,CAAC,EAAG,EAAGyB,EAAKjC,IAAIe,OAC9Db,EAAIoC,QAAQI,SAAS1C,EAAIiC,EAAKjC,EAC9BE,EAAIoC,QAAQI,SAAShB,EAAIO,EAAKP,MAMtC,mCACI,sBACIxB,IAAKA,EACLb,QAAS,kBAAMqB,GAAYD,IAC3BkC,eAAgB,SAACC,GAAD,OAAOhC,GAAW,IAClCiC,eAAgB,SAACD,GAAD,OAAOhC,GAAW,IAClCkC,SAAU7B,EAAYhD,GAAO8E,MAAM9E,GAAO6E,SAC1C3B,MAAOF,EAAYhD,GAAOkD,MAAQF,EAAYhD,GAAOkD,MAAQ,EAC7DC,WAAUH,EAAYhD,GAAOmD,UAAWH,EAAYhD,GAAOmD,SAP/D,SASI,sCACI4B,OAAO,WACPC,IAAKhC,EAAYhD,GAAOiF,UAAUC,KAAKF,IACvCG,SAAUnC,EAAYhD,GAAOoD,KAAOJ,EAAYhD,GAAOoD,KAAK5D,MAAQ,UACpE4F,kBAAmBpC,EAAYhD,GAAOoD,KAAOJ,EAAYhD,GAAOoD,KAAKC,UAAY,EACjFkB,UAAW/B,SCnFhB6C,EAhBI,WACf,IAAO1D,EAASZ,qBAAWM,GAApBM,MACA3B,EAASe,qBAAWnB,GAApBI,MAMP,OAJAiE,aAAS,SAAAC,OAKD,uBACIa,OAAO,aACPO,KAAM,CAAC,OAAD,OAAQ3D,EAAM3B,GAAOwB,QAAQ,GAA7B,YAAmCG,EAAM3B,GAAOwB,QAAQ,GAAxD,YAA8DG,EAAM3B,GAAOwB,QAAQ,GAAnF,SC2DP+D,EAhEQ,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,MAAOxD,EAAW,EAAXA,MAC5B,EAAkBjC,mBAAS,CAAC,IAAK,IAAK,GAAI,IAAnCyB,EAAP,oBAEA,EAA6BT,qBAAWnB,GAAjCI,EAAP,EAAOA,MAAOS,EAAd,EAAcA,YAEd,EAA6BM,qBAAWM,GAAjCM,EAAP,EAAOA,MAAOE,EAAd,EAAcA,YAEd,OACI,eAAC,IAAD,CACI4D,GAAI,CACAC,OAAO,EACPC,WAAW,EACXC,gBAAiB,oBAErBC,IAAM,OACNC,YAAa,CAAEC,IAAK,IACpBC,IAAK,CAAC,EAAG,KAETC,KAAK,aACLC,QAAQ,QACR3D,OAAQ,CAAE4D,KAAM,KAAOC,IAAW,IAANpE,EAAWqE,IAAK,IAC5ClF,UAAU,UACVmF,MAAO,CAAE7B,SAAU,QAAS3B,OAAQ,QAASyD,OAAQ,KAdzD,UAgBI,cAAClF,EAAcd,SAAf,CAAwBC,MAAO,CAACmB,QAAOE,eAAvC,SACI,cAACjC,EAAcW,SAAf,CAAwBC,MAAO,CAACR,QAAOS,eAAvC,SACI,cAAC,EAAD,QAGR,8BAAc4C,UAAW,KACzB,2BAAWoB,SAAU,CAAC,GAAI,GAAI,IAAKpB,UAAW,KAC9C,cAAC,WAAD,CAAUmD,SAAU,KAApB,SACI,eAAC5G,EAAcW,SAAf,CAAwBC,MAAO,CAACR,QAAOS,eAAvC,UAIAgG,MAAMC,KAAK,CAAEC,OAAQnB,IAAS,SAACoB,EAAGC,GAAJ,OAC1B,cAAC,EAAD,CAEI1E,GAAI0E,EACJ9E,GAAK8E,EAAIrB,EAASxD,EAAQ,EAC1BA,MAAOA,EACPR,QAASA,GAJJqF,MAUT,cAAC,IAAD,CAAgBC,cAAe,EAA/B,SACI,cAAC,IAAD,CACIC,OAAQ,CAAC,EAAG,EAAG/E,EAAQ,GACvBgF,YAAa,GACbC,WAAY,EACZnE,OAAQ,iB,QCrDpCoE,YAAO,CAACC,sBCIO,SAASC,EAAT,GAA0C,IAAD,IAA1B5B,aAA0B,MAAlB,GAAkB,MAAdxD,aAAc,MAAN,GAAM,EACpD,OACI,mCACI,cAAC,EAAD,UACA,eAAC,EAAD,WACI,eAAC,WAAD,CAAUwE,SAAU,KAApB,UACI,cAAC,EAAD,CAAgBhB,MAAOA,EAAOxD,MAAOA,IAErC,cAAC/C,EAAD,OAEJ,cAAC,EAAD,IACA,cAACoI,EAAA,EAAD,WCtBhBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACJ,EAAD,MAEFK,SAASC,eAAe,W","file":"static/js/main.a2deee4e.chunk.js","sourcesContent":["import styled, { keyframes } from 'styled-components'\n\nexport const fade = keyframes`\n    from { opacity:1 }\n    to { opacity: 0 }\n`\n\nexport const FadeIn = styled.div`\n    position: fixed;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    width: 100%;\n    height: 100vh !important;\n    pointer-events: none;\n    background: #ffd863;\n    animation: ${fade} 4s normal forwards ease-in-out 1s;\n    z-index: 2;\n`\n\nexport const Container = styled.div`\n    font-family: Avenir, Arial, Helvetica, sans-serif;\n    font-size: 16px;\n    padding: min(3vw, 3rem);\n\n\n    & h1 {\n        position: relative;\n        padding: 0;\n        margin: 0 0 0.05em 0;\n        font-family: Avenir, Arial, Helvetica, sans-serif;\n        font-weight: bold;\n        font-size: min(10vw, 8rem);\n        width: 6ch;\n        line-height: 0.85em;\n        color: #fff;\n        display: block;\n        z-index: 2;\n\n        & .outline {\n            -webkit-text-stroke: 0.04ch #fff;\n            -webkit-text-fill-color: #0000!important;\n        }\n    }\n\n    & p {\n        position: relative;\n        backdrop-filter: saturate(90%) blur(20px);\n        -webkit-backdrop-filter: saturate(90%) blur(20px);\n        z-index: 3;\n        padding: 3rem;\n        margin: 4rem auto;\n        border-radius: 15px;\n        font-size: min(calc(1.6 + 2vw), 1.6rem);\n\n        background-color: rgba(255,255,255,0.15);\n\n        @supports (-webkit-backdrop-filter: blur(0px)) or (backdrop-filter: blur(0px)) {\n            backdrop-filter: saturate(90%) blur(20px);\n            -webkit-backdrop-filter: saturate(90%) blur(20px);\n            background-color: transparent;\n            /* background-color: rgba(255,255,255,0.1); */\n        }\n\n    }\n`\n\nexport const Button = styled.button`\n    font-size: 2rem;\n    position: relative;\n    z-index:2;\n    margin-right: 2rem;\n    background-color: transparent;\n    color: ${ (props) => (props.color || '#fff')};\n    border: 1px solid #fff;\n    border-radius: 6px;\n    font-size: min(1.3rem, 6vw);\n    cursor: pointer;\n    padding: .4rem 1rem;\n    transition: all .3s ease;\n\n    &:hover  {\n        background-color: ${ (props) => props.hovercolors?.bg || 'transparent'};\n        color: ${(props) => (props.hovercolors?.color || '#343434')};\n        border: 1px solid ${(props) => (props.hovercolors?.border || props.hovercolors?.color)};\n    }\n\n`\n","import React, { createContext, useEffect, useState } from 'react'\n\nexport const FruitsContext = createContext()\n\nconst FruitsProvider = (props) => {\n\n    const defFruit = 'banana' // Default fruit\n\n    const [fruit, setFruit] = useState(defFruit)\n\n    useEffect(() => {\n        if(localStorage.getItem('fruitLocal')){\n            setFruit(JSON.parse(localStorage.getItem('fruitLocal')))\n        }\n    }, [])\n\n    const cambioFruit = (valor) => {\n        setFruit(valor)\n        localStorage.setItem('fruitLocal',JSON.stringify(valor))\n    }\n\n    return (\n        <FruitsContext.Provider value={{fruit, cambioFruit}} >\n            {props.children}\n        </FruitsContext.Provider>\n    )\n}\n\nexport default FruitsProvider;\n","import { Container, Button } from './styles'\n// import { ColorsContext } from '../context/ColorsProvider'\nimport { FruitsContext } from '../context/FruitsProvider'\nimport { useContext } from 'react'\n\n const Overlay = () => {\n\n    // const {theme, cambioTheme} = useContext(ColorsContext)\n\n    const {fruit, cambioFruit} = useContext(FruitsContext)\n\n    const title = (fruit === 'kiwi') ? 'Kiwi' : 'Banana'\n\n\n    const changeFruta = (fruta) => {\n        // const bg = (fruta === 'kiwi') ? '#00ff00' : '#ffff00'\n\n        // console.log(fruta, title);\n        // cambioTheme({\n        //     ...theme,\n        //     background: bg\n\n        // })\n        cambioFruit(fruta)\n    }\n\n    return (\n        <Container className=\"container\">\n            {/* <h1>{`The ${title}'s Life ···`}</h1> */}\n            <h1>The <span className=\"outline\">{title}'s</span> Life</h1>\n\n            {/* <p>\n                Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor\n                incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud\n                exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n            </p> */}\n             <Button onClick={() => changeFruta('kiwi')}>\n                Quiero Kiwis\n            </Button>\n             <Button onClick={() => changeFruta('banana')} color={'#fff'} hovercolors={{color: '#ffff00', bg: '#ff0000'}}>\n                Quiero Plátanos\n            </Button>\n        </Container>\n    )\n}\n\n\nexport default Overlay","import React, { createContext, useEffect, useState } from 'react'\n\nexport const ColorsContext = createContext()\n\nconst ColorsProvider = (props) => {\n\n// const [bgColor, setBgColor] = useState([255, 191, 64, 1])\n\n    const themes = {\n        banana: {\n            bgColor: [255, 191, 64, 1],\n            txtColor: [0,0,0],\n        },\n        kiwi: {\n            bgColor: [131,92,8,1],\n            txtColor: [255,255,0],\n        }\n    }\n\n    const [theme, setTheme] = useState(themes)\n\n    useEffect(() => {\n        if(localStorage.getItem('themeLocal')){\n            setTheme(JSON.parse(localStorage.getItem('themeLocal')))\n        }\n    }, [])\n\n    const cambioTheme = (valor) => {\n        setTheme(valor)\n        localStorage.setItem('themeLocal',JSON.stringify(valor))\n    }\n\n    return (\n        <ColorsContext.Provider value={{theme, cambioTheme}} >\n            {props.children}\n        </ColorsContext.Provider>\n    )\n}\n\nexport default ColorsProvider;\n","import * as THREE from 'three'\nimport { useRef, useState, useContext, useLayoutEffect, useEffect } from 'react'\nimport { useFrame, useThree } from '@react-three/fiber'\nimport { useGLTF } from '@react-three/drei'\n\n// import { ColorsContext } from '../context/ColorsProvider'\nimport { FruitsContext } from '../context/FruitsProvider'\n\nconst Banana = ({ z, depth, bgTo, id }) => {\n    const ref = useRef()\n    const { viewport, camera } = useThree()\n    const [clicked, setClicked] = useState(false)\n    const [hover, setHovered] = useState(false)\n\n\n\n    const {fruit} = useContext(FruitsContext)\n\n\n\n    let { width, height } = viewport.getCurrentViewport(camera, [0, 0, z])\n\n    // const dracoDecoderTemp = 'https://www.gstatic.com/draco/versioned/decoders/1.4.0/'\n    const dracoDecoderTemp = './gltf/'\n\n    // const { nodes, materials } = useGLTF('./banana-transformed.glb', dracoDecoderTemp)\n\n    // const { nodes, materials } = useGLTF('/kiwi-transformed.glb')\n\n    const fruitModels = {\n        kiwi: {\n            ...useGLTF('./kiwi-transformed.glb',dracoDecoderTemp),\n            scale: [2.77, 2.77, 2.77],\n            rotation: [0, 1.51, 0],\n            bgColor: [0, 255, 0,]\n        },\n        banana: {\n            ...useGLTF('./banana-transformed.glb', dracoDecoderTemp),\n            matE: {\n                color: 'orange',\n                intensity: 0.15\n            },\n            rotation: [-1.5, 0, 0],\n            bgColor: [255, 191, 64,],\n            scale: 1\n        }\n    }\n\n    const [data] = useState({\n        x: THREE.MathUtils.randFloatSpread(2), // -1 to 1\n        y: THREE.MathUtils.randFloatSpread(height),\n        z: z,\n        rX: Math.random() * Math.PI,\n        rY: Math.random() * Math.PI,\n        rZ: Math.random() * Math.PI,\n    })\n\n    useEffect(() => {\n        // console.log(ref, id);\n    }, [ref])\n\n    useFrame((state, delta, clock, camera) => {\n        ref.current.material.wireframe = hover\n\n\n\n        ref.current.rotation.set((data.rX += 0.001), (data.rY += 0.005), (data.rZ += 0.0005))\n        ref.current.position.set(\n            data.x * width,\n            (data.y += 0.02),\n            clicked ? (data.z -= 0.2) : data.z\n        )\n\n        if (data.y > viewport.getCurrentViewport(camera, [0, 0, data.z]).height) {\n            data.y = -viewport.getCurrentViewport(camera, [0, 0, data.z]).height * 0.85\n        }\n\n        if (clicked) {\n            if (ref.current.position.z < -(depth * 2)) {\n                // console.log('deflimit reached', -(depth * 1.1), 'con Z', ref.current.position.z)\n                setClicked(false)\n                data.z = -Math.random() * depth\n                data.y = -viewport.getCurrentViewport(camera, [0, 0, data.z]).height\n                ref.current.position.z = data.z\n                ref.current.position.y = data.y\n            }\n        }\n    })\n\n    return (\n        <>\n            <mesh\n                ref={ref}\n                onClick={() => setClicked(!clicked)}\n                onPointerEnter={(e) => setHovered(true) }\n                onPointerLeave={(e) => setHovered(false)}\n                geometry={fruitModels[fruit].nodes[fruit].geometry}\n                scale={fruitModels[fruit].scale ? fruitModels[fruit].scale : 1}\n                rotation={fruitModels[fruit].rotation ? fruitModels[fruit].rotation : false}\n            >\n                <meshStandardMaterial\n                    attach=\"material\"\n                    map={fruitModels[fruit].materials.skin.map}\n                    emissive={fruitModels[fruit].matE ? fruitModels[fruit].matE.color : \"#000000\"}\n                    emissiveIntensity={fruitModels[fruit].matE ? fruitModels[fruit].matE.intensity : 0 }\n                    wireframe={clicked}\n                />\n            </mesh>\n        </>\n    )\n}\n\n// ! INSTANCIANDO DIRECTAMENTE => NO mejora el rendimiento, RTF debe instanciarlas por defecto\nexport const Instances = ({ count = 40, temp = new THREE.Object3D(), z = 80, depth = 80 }) => {\n    const ref = useRef()\n    const { viewport, camera } = useThree()\n    // const [clicked, setClicked] = useState(false)\n    let { width, height } = viewport.getCurrentViewport(camera, [0, 0, z])\n\n    const { nodes, materials } = useGLTF('./banana-transformed.glb')\n\n    const geometry = nodes.banana.geometry\n\n    const [data] = useState({\n        x: THREE.MathUtils.randFloatSpread(2), // -1 to 1\n        y: THREE.MathUtils.randFloatSpread(height),\n        z: z,\n        rX: Math.random() * Math.PI,\n        rY: Math.random() * Math.PI,\n        rZ: Math.random() * Math.PI,\n    })\n\n    useLayoutEffect(() => {\n        // Set positions\n        for (let i = 0; i < count; i++) {\n            // temp.position.set(data.x * width, (data.y += 0.02), data.z)\n            temp.position.set(\n                (data.x = THREE.MathUtils.randFloatSpread(2) * width),\n                data.y,\n                -Math.random() * 80\n            )\n            temp.updateMatrix()\n            ref.current.setMatrixAt(i, temp.matrix)\n            // console.log(data.x)\n        }\n        // Update the instance\n        ref.current.instanceMatrix.needsUpdate = true\n    }, [count,data,temp,width])\n\n    useFrame((state) => {\n        // console.log(ref.current.instanceMatrix)\n        // console.log(ref.current.position.x)\n    })\n\n    return <instancedMesh ref={ref} args={[geometry, materials.skin, count]}></instancedMesh>\n}\n\nexport default Banana\n","import React, {useContext} from 'react'\nimport {ColorsContext} from '../context/ColorsProvider'\nimport { FruitsContext } from '../context/FruitsProvider'\nimport { useFrame } from '@react-three/fiber'\n\n\nconst Background = () => {\n    const {theme} = useContext(ColorsContext)\n    const {fruit} = useContext(FruitsContext)\n\n    useFrame(state => {\n        // console.log('background');\n    })\n\n    return (\n            <color\n                attach=\"background\"\n                args={[`rgb(${theme[fruit].bgColor[0]},${theme[fruit].bgColor[1]},${theme[fruit].bgColor[2]})`]}\n            />\n    )\n}\n\nexport default Background\n","\nimport React, { Suspense, useState, useContext } from 'react'\nimport { Canvas} from '@react-three/fiber'\nimport { EffectComposer, DepthOfField} from '@react-three/postprocessing'\nimport Banana from './Banana'\nimport {ColorsContext} from '../context/ColorsProvider'\nimport {FruitsContext} from '../context/FruitsProvider'\nimport Background from './Background'\n\n\n\n\nconst PageBackground = ({count, depth}) => {\n    const [bgColor] = useState([255, 191, 64, 1])\n\n    const {fruit, cambioFruit} = useContext(FruitsContext)\n\n    const {theme, cambioTheme} = useContext(ColorsContext)\n\n    return (\n        <Canvas\n            gl={{\n                alpha: false,\n                antialias: false,\n                powerPreference: \"high-performance\"\n            }}\n            gl2 = \"true\"\n            performance={{ min: 0.5 }}\n            dpr={[1, 1.5]}\n            // dpr={Math.max(window.devicePixelRatio, 1)}\n            mode=\"concurrent\"\n            shadows=\"false\"\n            camera={{ near: 0.001, far: depth*1.1, fov: 45 }}\n            className=\"webglbg\"\n            style={{ position: 'fixed', height: '100vh', zIndex: '1' }}\n        >\n            <ColorsContext.Provider value={{theme, cambioTheme}} >\n                <FruitsContext.Provider value={{fruit, cambioFruit}} >\n                    <Background />\n                </FruitsContext.Provider>\n            </ColorsContext.Provider>\n            <ambientLight intensity={0.2} />\n            <spotLight position={[10, 10, 10]} intensity={0.2} />\n            <Suspense fallback={null}>\n                <FruitsContext.Provider value={{fruit, cambioFruit}} >\n                {/* <Instances /> */}\n\n                {\n                Array.from({ length: count }, (_, i) => (\n                    <Banana\n                        key={i}\n                        id={i}\n                        z={-(i / count) * depth - 6}\n                        depth={depth}\n                        bgColor={bgColor}\n                    />\n                ))\n                }\n\n                {\n                    <EffectComposer multisampling={0}>\n                        <DepthOfField\n                            target={[0, 0, depth / 2]}\n                            focalLength={0.5}\n                            bokehScale={6}\n                            height={700}\n                        />\n                    </EffectComposer>\n               }\n            </FruitsContext.Provider>\n            </Suspense>\n\n        </Canvas>\n    )\n}\n\nexport default PageBackground\n","import * as THREE from 'three'\nimport React, { useRef, useMemo } from 'react'\nimport { Canvas, useFrame, useThree, extend} from '@react-three/fiber'\n// import { EffectComposer, DepthOfField} from '@react-three/postprocessing'\nimport { EffectComposer, DepthOfField, Bloom, Noise, Vignette, DotScreen } from \"@react-three/postprocessing\"\nimport {useGLTF} from '@react-three/drei'\n// import React from 'react'\n// import { Effects } from '@react-three/drei'\n\n// import { UnrealBloomPass } from 'three-stdlib'\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass'\n\nextend({UnrealBloomPass})\n\nconst Swarm = ({count}) => {\n    const light = useRef()\n    const mesh = useRef()\n    const {viewport, mouse} = useThree()\n    // const {viewport, mouse} = useThree()\n    const dummy = useMemo(() => new THREE.Object3D(), [])\n\n    const dracoDecoderTemp = './gltf/'\n    const model = useGLTF('./banana-transformed.glb', dracoDecoderTemp)\n\n    const geometry = model.nodes['banana'].geometry\n    const material = model.materials.skin\n\n    // console.log(model.materials);\n\n\n    // useMemo(() => {\n    //     geometry.computeVertexNormals()\n    //     geometry.scale(1,1,1)\n    // },[geometry])\n\n\n    // Generate random positions, speed factors and timings\n\n    const particles = useMemo(() => {\n        // Load Async model\n\n\n        const temp = []\n        for (let i = 0; i < count; i++) {\n            const t = Math.random() * 100\n            const factor = 20 + Math.random() * 100\n            const speed = 0.01 + Math.random() / 200\n            const xFactor = -50 + Math.random() * 100\n            const yFactor = -50 + Math.random() * 100\n            const zFactor = -50 + Math.random() * 100\n            temp.push({t, factor, speed, xFactor, yFactor, zFactor, mx: 0, my: 0})\n        }\n        return temp\n    },[count])\n\n    useFrame((state) => {\n        light.current.position.set((mouse.x * viewport.width / 2), (mouse.y * viewport.height / 2), 0)\n\n        particles.forEach((particle, i) => {\n            let { t, factor, speed, xFactor, yFactor, zFactor } = particle\n\n            t = particle.t += speed / 2\n            const a = Math.cos(t) + Math.sin(t * 1) / 10\n            const b = Math.cos(t) + Math.sin(t * 2) / 10\n            const s = Math.cos(t)\n\n            particle.mx += mouse.x * viewport.width * particle.mx * 0.01\n            particle.my += mouse.y * viewport.height * particle.my * 0.01\n\n            dummy.position.set(\n                (particle.mx / 10) * a + xFactor + Math.cos((t / 10) * factor) + (Math.sin(t * 1) * factor) / 10,\n                (particle.my / 10) * b + yFactor + Math.sin((t / 10) * factor) + (Math.cos(t * 2) * factor) / 10,\n                (particle.my / 10) * b + zFactor + Math.cos((t / 10) * factor) + (Math.sin(t * 3) * factor) / 10,\n            )\n\n            dummy.scale.set(s*1.6,s*1.6,s*1.6)\n            dummy.rotation.set(s*5,s*5,s*5)\n            dummy.updateMatrix()\n\n            // Apply the matrix to the instanced item\n            mesh.current.setMatrixAt(i, dummy.matrix)\n\n        })\n        mesh.current.instanceMatrix.needsUpdate = true\n\n\n    })\n\n    return (\n        <>\n            <pointLight postition={[0,0,60]} ref={light} distance={6} intensity={0.6} color=\"white\"/>\n            <instancedMesh ref={mesh} args={[null, null, count]} >\n                <tetrahedronBufferGeometry args={[1,0]}/>\n                <dodecahedronBufferGeometry args={[1,0]}/>\n\n                {/* <torusKnotBufferGeometry args={[3, 1, 60, 60]} /> */}\n                <meshStandardMaterial color=\"black\" />\n            </instancedMesh>\n\n            {/* <instancedMesh ref={mesh} args={[geometry, material, count]} /> */}\n        </>\n    )\n}\n\n\n\nconst Organic = () => {\n\n    return (\n\n        <Canvas\n            // camera={{ near: 0.001, far: 70*1.1, fov: 45, position: [0,0,70] }}\n            camera={{ fov: 75, position: [0, 0, 70] }}\n            gl={{\n                alpha: false,\n                antialias: true,\n                powerPreference: \"high-performance\"\n            }}\n            performance={{ min: 0.5 }}\n            dpr={[1, 1.5]}\n\n            className=\"webgl\"\n            style={{ position: 'fixed', height: '100vh', zIndex: '1' }}\n        >\n            <color attach=\"background\" args={['#141414']}/>\n            {/* <ColorsContext.Provider value={{theme, cambioTheme}} >\n                <FruitsContext.Provider value={{fruit, cambioFruit}} >\n                    <Background />\n                </FruitsContext.Provider>\n            </ColorsContext.Provider> */}\n\n            <pointLight intensity={0.2} color=\"white\" />\n            <spotLight intensity={1.2} position={[70,70,70]} penumbra={1} color=\"lightblue\" />\n            <Swarm count={600} />\n            {/* <Effects>\n                <waterPass attachArray=\"passes\" factor={2} />\n                <unrealBloomPass attachArray=\"passes\" args={[undefined, 1.5, 1, 0]} />\n            </Effects> */}\n\n            <EffectComposer disableNormalPass={true} multisampling={0}>\n                <DepthOfField target={[0, 0, 30 / 2]} focusDistance={0} focalLength={0.05} bokehScale={3} height={380} />\n                <Bloom luminanceThreshold={3} luminanceSmoothing={1.1} height={300} opacity={3} />\n                <Noise opacity={0.025} />\n                <Vignette eskil={false} offset={0.1} darkness={1.1} />\n            </EffectComposer>\n\n        </Canvas>\n    )\n}\n\nexport default Organic\n","import { Suspense } from 'react'\nimport {Stats} from '@react-three/drei'\nimport Overlay from './layout/Overlay'\nimport { FadeIn } from './layout/styles'\nimport ColorsProvider from './context/ColorsProvider'\nimport FruitsProvider from './context/FruitsProvider'\nimport PageBackground from './components/PageBackground'\nimport Organic from './components/Organic'\n\n\n/* const Loader = () => {\n    const { progress } = useProgress()\n    // console.log(`progress= ${progress}`)\n    return <Html center>{progress} % loaded</Html>\n}\n */\nexport default function App({ count = 60, depth = 80 }) {\n    return (\n        <>\n            <ColorsProvider>\n            <FruitsProvider>\n                <Suspense fallback={null}>\n                    <PageBackground count={count} depth={depth}/>\n                    {/* <Organic /> */}\n                    <FadeIn />\n                </Suspense>\n                <Overlay />\n                <Stats />\n            </FruitsProvider>\n            </ColorsProvider>\n\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}